networks:
  yamata-network-beta:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24

volumes:
  postgres_data_beta:
    driver: local
  redi_data_beta:
    driver: local
  nginx_logs_beta:
    driver: local
  app_logs_beta:
    driver: local
  prometheus_data_beta:
    driver: local
  grafana_data_beta:
    driver: local

services:
  # PostgreSQL Database
  postgres-beta:
    image: postgres:15-alpine
    container_name: yamata-postgres-beta
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data_beta:/var/lib/postgresql/data
      - ./docker/postgres/init-beta-processed.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/init-database-beta-processed.sql:/docker-entrypoint-initdb.d/02-init-database.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./migrations:/migrations:ro
    networks:
      yamata-network-beta:
        ipv4_address: 172.30.0.10
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache
  redis-beta:
    image: redis:8.0.3-alpine
    container_name: yamata-redis-beta
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - redi_data_beta:/data
      # - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      yamata-network-beta:
        ipv4_address: 172.30.0.11
    # command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      # test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Application
  app-beta:
    image: yamata-no-orochi
    container_name: yamata-app-beta
    restart: unless-stopped
    depends_on:
      postgres-beta:
        condition: service_healthy
      redis-beta:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: postgres-beta
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL_MODE: ${DB_SSL_MODE}
      DB_MAX_OPEN_CONNS: ${DB_MAX_OPEN_CONNS}
      DB_MAX_IDLE_CONNS: ${DB_MAX_IDLE_CONNS}
      DB_CONN_MAX_LIFETIME: ${DB_CONN_MAX_LIFETIME}
      DB_CONN_MAX_IDLE_TIME: ${DB_CONN_MAX_IDLE_TIME}
      DB_SLOW_QUERY_LOG: ${DB_SLOW_QUERY_LOG}
      DB_SLOW_QUERY_TIME: ${DB_SLOW_QUERY_TIME}

      # Server Configuration
      SERVER_HOST: ${SERVER_HOST}
      SERVER_PORT: ${SERVER_PORT}
      SERVER_READ_TIMEOUT: ${SERVER_READ_TIMEOUT}
      SERVER_WRITE_TIMEOUT: ${SERVER_WRITE_TIMEOUT}
      SERVER_IDLE_TIMEOUT: ${SERVER_IDLE_TIMEOUT}
      SERVER_SHUTDOWN_TIMEOUT: ${SERVER_SHUTDOWN_TIMEOUT}
      SERVER_BODY_LIMIT: ${SERVER_BODY_LIMIT}
      SERVER_ENABLE_PPROF: ${SERVER_ENABLE_PPROF}
      SERVER_ENABLE_METRICS: ${SERVER_ENABLE_METRICS}
      SERVER_TRUSTED_PROXIES: ${SERVER_TRUSTED_PROXIES}
      SERVER_PROXY_HEADER: ${SERVER_PROXY_HEADER}
      SERVER_ENABLE_COMPRESSION: ${SERVER_ENABLE_COMPRESSION}
      SERVER_COMPRESSION_LEVEL: ${SERVER_COMPRESSION_LEVEL}

      # Security Configuration
      TLS_ENABLED: ${TLS_ENABLED}
      TLS_CERT_FILE: ${TLS_CERT_FILE}
      TLS_KEY_FILE: ${TLS_KEY_FILE}
      TLS_MIN_VERSION: ${TLS_MIN_VERSION}
      HSTS_MAX_AGE: ${HSTS_MAX_AGE}
      HSTS_INCLUDE_SUBDOMAINS: ${HSTS_INCLUDE_SUBDOMAINS}
      HSTS_PRELOAD: ${HSTS_PRELOAD}

      # CORS Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS}
      CORS_MAX_AGE: ${CORS_MAX_AGE}

      # Rate Limiting
      AUTH_RATE_LIMIT: ${AUTH_RATE_LIMIT}
      GLOBAL_RATE_LIMIT: ${GLOBAL_RATE_LIMIT}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW}
      RATE_LIMIT_MEMORY: ${RATE_LIMIT_MEMORY}

      # Content Security Policy
      CSP_POLICY: ${CSP_POLICY}
      X_FRAME_OPTIONS: ${X_FRAME_OPTIONS}
      X_CONTENT_TYPE_OPTIONS: ${X_CONTENT_TYPE_OPTIONS}
      XSS_PROTECTION: ${XSS_PROTECTION}
      REFERRER_POLICY: ${REFERRER_POLICY}

      # API Security
      REQUIRE_API_KEY: ${REQUIRE_API_KEY}
      API_KEY_HEADER: ${API_KEY_HEADER}
      ALLOWED_API_KEYS: ${ALLOWED_API_KEYS}
      IP_WHITELIST: ${IP_WHITELIST}
      IP_BLACKLIST: ${IP_BLACKLIST}

      # Password & Authentication
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH}
      PASSWORD_REQUIRE_UPPER: ${PASSWORD_REQUIRE_UPPER}
      PASSWORD_REQUIRE_LOWER: ${PASSWORD_REQUIRE_LOWER}
      PASSWORD_REQUIRE_NUMBER: ${PASSWORD_REQUIRE_NUMBER}
      PASSWORD_REQUIRE_SYMBOL: ${PASSWORD_REQUIRE_SYMBOL}
      BCRYPT_COST: ${BCRYPT_COST}

      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_USE_RSA_KEYS: ${JWT_USE_RSA_KEYS}
      JWT_ACCESS_TOKEN_TTL: ${JWT_ACCESS_TOKEN_TTL}
      JWT_REFRESH_TOKEN_TTL: ${JWT_REFRESH_TOKEN_TTL}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      JWT_ALGORITHM: ${JWT_ALGORITHM}

      # Session Security
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      SESSION_COOKIE_HTTPONLY: ${SESSION_COOKIE_HTTPONLY}
      SESSION_COOKIE_SAMESITE: ${SESSION_COOKIE_SAMESITE}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT}
      SESSION_CLEANUP_INTERVAL: ${SESSION_CLEANUP_INTERVAL}

      # SMS Configuration
      SMS_PROVIDER_DOMAIN: ${SMS_PROVIDER_DOMAIN}
      SMS_API_KEY: ${SMS_API_KEY}
      SMS_SOURCE_NUMBER: ${SMS_SOURCE_NUMBER}
      SMS_RETRY_COUNT: ${SMS_RETRY_COUNT}
      SMS_VALIDITY_PERIOD: ${SMS_VALIDITY_PERIOD}
      SMS_TIMEOUT: ${SMS_TIMEOUT}

      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM_EMAIL: ${EMAIL_FROM_EMAIL}
      EMAIL_FROM_NAME: ${EMAIL_FROM_NAME}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}
      EMAIL_USE_STARTTLS: ${EMAIL_USE_STARTTLS}
      EMAIL_RATE_LIMIT: ${EMAIL_RATE_LIMIT}
      EMAIL_RETRY_ATTEMPTS: ${EMAIL_RETRY_ATTEMPTS}
      EMAIL_TIMEOUT: ${EMAIL_TIMEOUT}

      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      LOG_OUTPUT: ${LOG_OUTPUT}
      LOG_FILE_PATH: ${LOG_FILE_PATH}
      LOG_MAX_SIZE: ${LOG_MAX_SIZE}
      LOG_MAX_BACKUPS: ${LOG_MAX_BACKUPS}
      LOG_MAX_AGE: ${LOG_MAX_AGE}
      LOG_COMPRESS: ${LOG_COMPRESS}
      LOG_ENABLE_CALLER: ${LOG_ENABLE_CALLER}
      LOG_ENABLE_STACKTRACE: ${LOG_ENABLE_STACKTRACE}
      LOG_ENABLE_ACCESS: ${LOG_ENABLE_ACCESS}
      LOG_ACCESS_PATH: ${LOG_ACCESS_PATH}
      LOG_ACCESS_FORMAT: ${LOG_ACCESS_FORMAT}
      LOG_ENABLE_AUDIT: ${LOG_ENABLE_AUDIT}
      LOG_AUDIT_PATH: ${LOG_AUDIT_PATH}
      LOG_ENABLE_SECURITY: ${LOG_ENABLE_SECURITY}
      LOG_SECURITY_PATH: ${LOG_SECURITY_PATH}

      # Metrics Configuration
      METRICS_ENABLED: ${METRICS_ENABLED}
      METRICS_PORT: ${METRICS_PORT}
      METRICS_PATH: ${METRICS_PATH}
      METRICS_ENABLE_PPROF: ${METRICS_ENABLE_PPROF}
      METRICS_PPROF_PORT: ${METRICS_PPROF_PORT}
      METRICS_ENABLE_PROMETHEUS: ${METRICS_ENABLE_PROMETHEUS}
      METRICS_PROMETHEUS_PATH: ${METRICS_PROMETHEUS_PATH}
      METRICS_COLLECT_DB: ${METRICS_COLLECT_DB}
      METRICS_COLLECT_CACHE: ${METRICS_COLLECT_CACHE}
      METRICS_COLLECT_APP: ${METRICS_COLLECT_APP}

      # Cache Configuration
      CACHE_ENABLED: ${CACHE_ENABLED}
      CACHE_PROVIDER: ${CACHE_PROVIDER}
      CACHE_REDIS_URL: redis://redis-beta:6379
      CACHE_REDIS_DB: ${CACHE_REDIS_DB}
      CACHE_REDIS_PREFIX: ${CACHE_REDIS_PREFIX}
      CACHE_DEFAULT_TTL: ${CACHE_DEFAULT_TTL}
      CACHE_MAX_MEMORY: ${CACHE_MAX_MEMORY}
      CACHE_CLEANUP_INTERVAL: ${CACHE_CLEANUP_INTERVAL}

      # Deployment Configuration
      DOMAIN: ${DOMAIN}
      API_DOMAIN: ${API_DOMAIN}
      MONITORING_DOMAIN: ${MONITORING_DOMAIN}
      CERTBOT_EMAIL: ${CERTBOT_EMAIL}
      GRAFANA_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_S3_ACCESS_KEY: ${BACKUP_S3_ACCESS_KEY}
      BACKUP_S3_SECRET_KEY: ${BACKUP_S3_SECRET_KEY}
      APP_ENV: ${APP_ENV}
      VERSION: ${VERSION:-1.0.0}
      COMMIT_HASH: ${COMMIT_HASH:-unknown}
      BUILD_TIME: ${BUILD_TIME:-unknown}

    volumes:
      - app_logs_beta:/var/log/yamata
    # ports:
    #   - "127.0.0.1:8080:8080"  # Only accessible from localhost
    #   - "127.0.0.1:9090:9090"  # Metrics port
    networks:
      yamata-network-beta:
        ipv4_address: 172.30.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "--noproxy", "localhost", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    user: "appuser"

  # Nginx Reverse Proxy
  nginx-beta:
    image: nginx:1.29-alpine
    container_name: yamata-nginx-beta
    restart: unless-stopped
    depends_on:
      app-beta:
        condition: service_healthy
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites-available/generated/beta:/etc/nginx/sites-available:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/security.conf:/etc/nginx/security.conf:ro
      - ./docker/nginx/gzip.conf:/etc/nginx/gzip.conf:ro
      - ./docker/nginx/proxy.conf:/etc/nginx/proxy.conf:ro
      - nginx_logs_beta:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro  # Let's Encrypt certificates
    # ports:
    #   - "80:80"
    #   - "443:443"
    networks:
      yamata-network-beta:
        ipv4_address: 172.30.0.30
    healthcheck:
      test: ["CMD", "curl", "-f", "--noproxy", "app-beta", "http://app-beta:8080/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp

  # Prometheus (Optional - for monitoring)
  prometheus-beta:
    image: prom/prometheus:v3.5.0
    container_name: yamata-prometheus-beta
    restart: unless-stopped
    volumes:
      - prometheus_data_beta:/prometheus
      # - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # - ./docker/prometheus/rules:/etc/prometheus/rules:ro
    # ports:
    #   - "127.0.0.1:9091:9090"  # Only accessible from localhost
    networks:
      yamata-network-beta:
        ipv4_address: 172.30.0.40
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user

  # Grafana (Optional - for monitoring dashboards)
  grafana-beta:
    image: grafana/grafana:12.1.0-ubuntu
    container_name: yamata-grafana-beta
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: true
    volumes:
      - grafana_data_beta:/var/lib/grafana
      # - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      # - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    # ports:
    #   - "127.0.0.1:3000:3000"  # Only accessible from localhost
    networks:
      yamata-network-beta:
        ipv4_address: 172.30.0.50
    depends_on:
      - prometheus-beta
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # grafana user 
