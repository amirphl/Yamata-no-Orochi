// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/auth/captcha/init": {
            "get": {
                "description": "Initialize rotate captcha for admin login (returns base64 images and challenge ID)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Authentication"
                ],
                "summary": "Admin captcha init",
                "responses": {
                    "200": {
                        "description": "Captcha initialized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminCaptchaInitResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to initialize captcha",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/auth/login": {
            "post": {
                "description": "Verify captcha and authenticate admin with username/password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Authentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminCaptchaVerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "access_token": {
                                                    "type": "string"
                                                },
                                                "admin": {
                                                    "$ref": "#/definitions/dto.AdminDTO"
                                                },
                                                "expires_in": {
                                                    "type": "integer"
                                                },
                                                "refresh_token": {
                                                    "type": "string"
                                                },
                                                "token_type": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or captcha",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Incorrect credentials or admin not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Admin inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/campaigns": {
            "get": {
                "description": "Retrieve campaigns by title, status, start date, and end date",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Campaigns"
                ],
                "summary": "Admin List Campaigns",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by title (contains)",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (initiated|in_progress|waiting_for_approval|approved|rejected)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter created_at \u003e= start_date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter created_at \u003c= end_date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.GetCampaignResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/campaigns/approve": {
            "post": {
                "description": "Approve a campaign waiting for approval; moves reserved funds from frozen to locked",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Campaigns"
                ],
                "summary": "Approve Campaign",
                "parameters": [
                    {
                        "description": "Approval payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminApproveCampaignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminApproveCampaignResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Invalid state",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/campaigns/reject": {
            "post": {
                "description": "Reject a campaign waiting for approval; refunds reserved funds to free balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Campaigns"
                ],
                "summary": "Reject Campaign",
                "parameters": [
                    {
                        "description": "Rejection payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminRejectCampaignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminRejectCampaignResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Invalid state",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/campaigns/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Campaigns"
                ],
                "summary": "Admin Get Campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminGetCampaignResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/customer-management/shares": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Customer Management"
                ],
                "summary": "Admin Customers Shares Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter created_at \u003e= start_date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter created_at \u003c= end_date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminCustomersSharesResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/customer-management/{customer_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Customer Management"
                ],
                "summary": "Admin Get Customer With Campaigns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminCustomerWithCampaignsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/line-numbers/": {
            "get": {
                "description": "Retrieve all line numbers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Line Numbers"
                ],
                "summary": "List Line Numbers (Admin)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.AdminLineNumberDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "List failed",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update multiple line numbers; all IDs must exist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Line Numbers"
                ],
                "summary": "Batch Update Line Numbers (Admin)",
                "parameters": [
                    {
                        "description": "Batch update payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminUpdateLineNumbersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "updated": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Update failed",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a line number with name (optional), unique value, price factor, priority (optional), and is_active (optional)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Line Numbers"
                ],
                "summary": "Create Line Number (Admin)",
                "parameters": [
                    {
                        "description": "Create line number payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdminCreateLineNumberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminLineNumberDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Creation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/line-numbers/report": {
            "get": {
                "description": "Retrieve report per line number (totals)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin Line Numbers"
                ],
                "summary": "Line Numbers Report (Admin)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dto.AdminLineNumberReportItem"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Report generation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/tickets": {
            "get": {
                "description": "Admin lists tickets with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Filter by customer id",
                        "name": "customer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Exact title filter",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by replied flag",
                        "name": "replied_by_admin",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin tickets retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminListTicketsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/tickets/reply": {
            "post": {
                "description": "Admin creates a response to an existing ticket; new ticket shares correlation ID with the original. Supports multipart or JSON.",
                "consumes": [
                    "multipart/form-data",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Original ticket ID",
                        "name": "ticket_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Response content (\u003c=1000 chars)",
                        "name": "content",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Attachment (jpg/png/pdf/docx/xlsx/zip, \u003c=10MB)",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "description": "JSON alternative payload",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.AdminCreateResponseTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Admin response created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AdminCreateResponseTicketResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Ticket not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "description": "Initiate password reset by sending OTP to registered mobile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "Password reset request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "customer_id": {
                                                    "type": "integer"
                                                },
                                                "expires_in": {
                                                    "type": "integer"
                                                },
                                                "masked_phone": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Authenticate user with email/mobile and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with tokens",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "access_token": {
                                                    "type": "string"
                                                },
                                                "customer": {
                                                    "$ref": "#/definitions/dto.AuthCustomerDTO"
                                                },
                                                "expires_in": {
                                                    "type": "integer"
                                                },
                                                "refresh_token": {
                                                    "type": "string"
                                                },
                                                "token_type": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/resend-otp": {
            "post": {
                "description": "Resend OTP code to user's mobile number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend OTP",
                "parameters": [
                    {
                        "description": "OTP resend request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OTPResendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP resent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "masked_otp_target": {
                                                    "type": "string"
                                                },
                                                "otp_sent": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset": {
            "post": {
                "description": "Complete password reset with OTP verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Password reset data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful with tokens",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "access_token": {
                                                    "type": "string"
                                                },
                                                "customer": {
                                                    "$ref": "#/definitions/dto.AuthCustomerDTO"
                                                },
                                                "expires_in": {
                                                    "type": "integer"
                                                },
                                                "password_changed_at": {
                                                    "type": "string"
                                                },
                                                "refresh_token": {
                                                    "type": "string"
                                                },
                                                "token_type": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or OTP",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Register a new user account with email verification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration initiated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SignupResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify": {
            "post": {
                "description": "Verify OTP code sent to user's mobile number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "OTP verification data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OTPVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "access_token": {
                                                    "type": "string"
                                                },
                                                "customer": {
                                                    "$ref": "#/definitions/dto.AuthCustomerDTO"
                                                },
                                                "expires_in": {
                                                    "type": "integer"
                                                },
                                                "refresh_token": {
                                                    "type": "string"
                                                },
                                                "token_type": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid OTP or request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/bot/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot Authentication"
                ],
                "summary": "Bot Login",
                "parameters": [
                    {
                        "description": "Bot login",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BotLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BotLoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/bot/campaigns/audience-spec": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot Campaigns"
                ],
                "summary": "Bot Update Audience Spec",
                "parameters": [
                    {
                        "description": "Audience spec update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BotUpdateAudienceSpecRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BotUpdateAudienceSpecResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/bot/campaigns/ready": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot Campaigns"
                ],
                "summary": "Bot List Ready Campaigns",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.BotListCampaignsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/bot/campaigns/{id}/executed": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot Campaigns"
                ],
                "summary": "Bot Move Campaign to Executed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Campaign ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/bot/campaigns/{id}/running": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot Campaigns"
                ],
                "summary": "Bot Move Campaign to Running",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Campaign ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/campaigns": {
            "get": {
                "description": "Retrieve the authenticated user's campaigns with pagination, ordering, and filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaigns"
                ],
                "summary": "List Campaigns",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (max 100)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "newest",
                        "description": "Order by (newest|oldest)",
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by title (contains)",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (initiated|in-progress|waiting-for-approval|approved|rejected|running|executed)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListCampaignsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new campaign with the specified parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaigns"
                ],
                "summary": "Create Campaign",
                "parameters": [
                    {
                        "description": "Campaign creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCampaignRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Campaign created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CreateCampaignResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/campaigns/audience-spec": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaigns"
                ],
                "summary": "List Audience Spec",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "object",
                                                "additionalProperties": true
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/campaigns/calculate-capacity": {
            "post": {
                "description": "Calculate the potential reach and capacity of an campaign based on parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaigns"
                ],
                "summary": "Calculate Campaign Capacity",
                "parameters": [
                    {
                        "description": "Campaign parameters for capacity calculation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CalculateCampaignCapacityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Capacity calculated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CalculateCampaignCapacityResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/campaigns/calculate-cost": {
            "post": {
                "description": "Calculate the total cost of an campaign based on content, target audience, and pricing factors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaigns"
                ],
                "summary": "Calculate Campaign Cost",
                "parameters": [
                    {
                        "description": "Campaign parameters for cost calculation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CalculateCampaignCostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cost calculated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CalculateCampaignCostResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/campaigns/{uuid}": {
            "put": {
                "description": "Update an existing campaign with the specified parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaigns"
                ],
                "summary": "Update Campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Campaign update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCampaignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Campaign updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.UpdateCampaignResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - campaign access denied or update not allowed",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Campaign not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "Check the health status of the API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/line-numbers/active": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Line Numbers"
                ],
                "summary": "List Active Line Numbers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListActiveLineNumbersResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/payments/callback/{invoice_number}": {
            "post": {
                "description": "Handles the callback from the payment gateway (Atipay)",
                "consumes": [
                    "application/json",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Payment Callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice (reservation) number",
                        "name": "invoice_number",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Callback data from Atipay (form or JSON)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.AtipayRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML payment result page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Payment request not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Payment already processed or expired",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/charge-wallet": {
            "post": {
                "description": "Charge a customer's wallet with the specified amount using Atipay payment gateway",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Charge Wallet",
                "parameters": [
                    {
                        "description": "Wallet charging data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChargeWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wallet charged successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ChargeWalletResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payments/history": {
            "get": {
                "description": "Retrieve paginated transaction history for the authenticated customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Get Transaction History",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date filter (ISO 8601 format)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date filter (ISO 8601 format)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Transaction type filter",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Transaction status filter",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction history retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.TransactionHistoryResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/agency/customers": {
            "get": {
                "description": "Retrieve per-customer aggregated stats of campaigns for an agency with pagination and filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get Agency Customer Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sorting (name_asc|name_desc|sent_desc|share_desc)",
                        "name": "orderby",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by customer name (first+last)",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AgencyCustomerReportResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/agency/customers/list": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "List Agency Customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListAgencyCustomersResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/agency/customers/{customer_id}/discounts": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "List Customer Discounts Under Agency",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListAgencyCustomerDiscountsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/agency/discounts": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Create Agency Discount",
                "parameters": [
                    {
                        "description": "Create discount payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAgencyDiscountRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CreateAgencyDiscountResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/reports/agency/discounts/active": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "List Active Discounts of Agency",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user name (first+last)",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListAgencyActiveDiscountsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tickets": {
            "get": {
                "description": "List customer's tickets grouped by correlation ID (each group sorted by id DESC)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exact title filter",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date (RFC3339)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (RFC3339)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tickets retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListTicketsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new support ticket for the authenticated customer. Supports multipart form upload or JSON.",
                "consumes": [
                    "multipart/form-data",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket title (\u003c=80 chars)",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Ticket content (\u003c=1000 chars)",
                        "name": "content",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Attachment (jpg/png/pdf/docx/xlsx/zip, \u003c=10MB)",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "description": "JSON alternative for creating ticket",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ticket created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CreateTicketResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tickets/reply": {
            "post": {
                "description": "Create a response to an existing ticket. Customer can reply to their own tickets. Supports multipart form upload or JSON.",
                "consumes": [
                    "multipart/form-data",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Original ticket ID to respond to",
                        "name": "ticket_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Response content (\u003c=1000 chars)",
                        "name": "content",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Attachment (jpg/png/pdf/docx/xlsx/zip, \u003c=10MB)",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "description": "JSON alternative for creating response",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateResponseTicketRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Response ticket created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.CreateResponseTicketResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - ticket does not belong to customer",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Ticket not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/wallet/balance": {
            "get": {
                "description": "Retrieve the current wallet balance and financial information for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get User Wallet Balance",
                "responses": {
                    "200": {
                        "description": "Wallet balance retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.GetWalletBalanceResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - customer not found or inactive",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Wallet or snapshot not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "dto.ActiveLineNumberItem": {
            "type": "object",
            "properties": {
                "line_number": {
                    "type": "string"
                }
            }
        },
        "dto.AdminApproveCampaignRequest": {
            "type": "object",
            "required": [
                "campaign_id"
            ],
            "properties": {
                "campaign_id": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 1000
                }
            }
        },
        "dto.AdminApproveCampaignResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.AdminCaptchaInitResponse": {
            "type": "object",
            "properties": {
                "challenge_id": {
                    "type": "string"
                },
                "master_image_base64": {
                    "type": "string"
                },
                "thumb_image_base64": {
                    "type": "string"
                }
            }
        },
        "dto.AdminCaptchaVerifyRequest": {
            "type": "object",
            "required": [
                "challenge_id",
                "password",
                "user_angle",
                "username"
            ],
            "properties": {
                "challenge_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8
                },
                "user_angle": {
                    "type": "number"
                },
                "username": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "dto.AdminCreateLineNumberRequest": {
            "type": "object",
            "required": [
                "line_number",
                "price_factor"
            ],
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "line_number": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                },
                "name": {
                    "type": "string",
                    "maxLength": 255
                },
                "price_factor": {
                    "type": "number"
                },
                "priority": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminCreateResponseTicketRequest": {
            "type": "object",
            "properties": {
                "attached_file_name": {
                    "type": "string"
                },
                "attached_file_size": {
                    "type": "integer"
                },
                "attached_file_url": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminCreateResponseTicketResponse": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.AdminCustomerCampaignItem": {
            "type": "object",
            "properties": {
                "campaign_id": {
                    "type": "integer"
                },
                "click_rate": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "schedule_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "total_delivered": {
                    "type": "integer"
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminCustomerDetailDTO": {
            "type": "object",
            "properties": {
                "account_type_id": {
                    "type": "integer"
                },
                "account_type_name": {
                    "type": "string"
                },
                "agency_referer_code": {
                    "type": "string"
                },
                "company_address": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "company_phone": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_email_verified": {
                    "type": "boolean"
                },
                "is_mobile_verified": {
                    "type": "boolean"
                },
                "last_login_at": {
                    "type": "string"
                },
                "mobile_verified_at": {
                    "type": "string"
                },
                "national_id": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "referrer_agency_id": {
                    "type": "integer"
                },
                "representative_first_name": {
                    "type": "string"
                },
                "representative_last_name": {
                    "type": "string"
                },
                "representative_mobile": {
                    "type": "string"
                },
                "sheba_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.AdminCustomerWithCampaignsResponse": {
            "type": "object",
            "properties": {
                "campaigns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdminCustomerCampaignItem"
                    }
                },
                "customer": {
                    "$ref": "#/definitions/dto.AdminCustomerDetailDTO"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.AdminCustomersSharesItem": {
            "type": "object",
            "properties": {
                "agency_share_with_tax": {
                    "type": "integer"
                },
                "click_rate": {
                    "type": "number"
                },
                "company_name": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "referrer_agency_name": {
                    "type": "string"
                },
                "system_share": {
                    "type": "integer"
                },
                "tax_share": {
                    "type": "integer"
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminCustomersSharesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AdminCustomersSharesItem"
                    }
                },
                "message": {
                    "type": "string"
                },
                "sum_agency_share_with_tax": {
                    "type": "integer"
                },
                "sum_system_share": {
                    "type": "integer"
                },
                "sum_tax_share": {
                    "type": "integer"
                },
                "sum_total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                },
                "uuid": {
                    "type": "string",
                    "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                }
            }
        },
        "dto.AdminGetCampaignResponse": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string"
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "line_number": {
                    "type": "string"
                },
                "line_number_price_factor": {
                    "type": "number"
                },
                "scheduleat": {
                    "type": "string"
                },
                "segment": {
                    "type": "string"
                },
                "segment_price_factor": {
                    "type": "number"
                },
                "sex": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subsegment": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.AdminLineNumberDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "line_number": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price_factor": {
                    "type": "number"
                },
                "priority": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.AdminLineNumberReportItem": {
            "type": "object",
            "properties": {
                "line_number": {
                    "type": "string"
                },
                "total_arrived_parts_sent": {
                    "type": "integer"
                },
                "total_cost": {
                    "type": "integer"
                },
                "total_income": {
                    "type": "integer"
                },
                "total_non_arrived_parts_sent": {
                    "type": "integer"
                },
                "total_parts_sent": {
                    "type": "integer"
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminListTicketsResponse": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TicketGroup"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.AdminRejectCampaignRequest": {
            "type": "object",
            "required": [
                "campaign_id",
                "comment"
            ],
            "properties": {
                "campaign_id": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 1000
                }
            }
        },
        "dto.AdminRejectCampaignResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.AdminUpdateLineNumberItem": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "integer"
                }
            }
        },
        "dto.AdminUpdateLineNumbersRequest": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.AdminUpdateLineNumberItem"
                    }
                }
            }
        },
        "dto.AgencyActiveDiscountItem": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "discount_rate": {
                    "type": "number"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "dto.AgencyCustomerDiscountItem": {
            "type": "object",
            "properties": {
                "agency_share_with_tax": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "discount_rate": {
                    "type": "number"
                },
                "expires_at": {
                    "type": "string"
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AgencyCustomerItem": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "dto.AgencyCustomerReportItem": {
            "type": "object",
            "properties": {
                "company_name": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "total_agency_share_with_tax": {
                    "type": "integer"
                },
                "total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AgencyCustomerReportResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AgencyCustomerReportItem"
                    }
                },
                "message": {
                    "type": "string"
                },
                "sum_total_agency_share_with_tax": {
                    "type": "integer"
                },
                "sum_total_sent": {
                    "type": "integer"
                }
            }
        },
        "dto.AtipayRequest": {
            "type": "object",
            "properties": {
                "maskedPan": {
                    "description": "Masked card number used for payment",
                    "type": "string"
                },
                "referenceNumber": {
                    "description": "Unique digital receipt (alphanumeric)",
                    "type": "string"
                },
                "reservationNumber": {
                    "description": "The unique ID originally sent by merchant (our invoice number)",
                    "type": "string"
                },
                "rrn": {
                    "description": "Transaction reference number",
                    "type": "string"
                },
                "state": {
                    "description": "Transaction status (1=CanceledByUser, 2=OK, 3=Failed, etc.)",
                    "type": "string"
                },
                "status": {
                    "description": "Payment status code",
                    "type": "string"
                },
                "terminalId": {
                    "description": "Terminal number used for payment",
                    "type": "string"
                },
                "traceNumber": {
                    "description": "Tracking number generated by payment gateway",
                    "type": "string"
                }
            }
        },
        "dto.AuthCustomerDTO": {
            "type": "object",
            "properties": {
                "account_type": {
                    "type": "string",
                    "example": "individual"
                },
                "company_name": {
                    "type": "string",
                    "example": "Tech Company Ltd"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "is_email_verified": {
                    "type": "boolean",
                    "example": true
                },
                "is_mobile_verified": {
                    "type": "boolean",
                    "example": true
                },
                "referrer_agency_id": {
                    "type": "integer",
                    "example": 123
                },
                "representative_first_name": {
                    "type": "string",
                    "example": "John"
                },
                "representative_last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "representative_mobile": {
                    "type": "string",
                    "example": "+989123456789"
                }
            }
        },
        "dto.BotDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.BotGetCampaignResponse": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string"
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "line_number": {
                    "type": "string"
                },
                "num_audiences": {
                    "type": "integer"
                },
                "scheduleat": {
                    "type": "string"
                },
                "segment": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subsegment": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.BotListCampaignsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BotGetCampaignResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.BotLoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                }
            }
        },
        "dto.BotLoginResponse": {
            "type": "object",
            "properties": {
                "bot": {
                    "$ref": "#/definitions/dto.BotDTO"
                },
                "session": {
                    "$ref": "#/definitions/dto.BotSessionDTO"
                }
            }
        },
        "dto.BotSessionDTO": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "dto.BotUpdateAudienceSpecRequest": {
            "type": "object",
            "required": [
                "available_audience",
                "segment",
                "subsegment",
                "tags"
            ],
            "properties": {
                "available_audience": {
                    "type": "integer",
                    "minimum": 0
                },
                "segment": {
                    "type": "string",
                    "maxLength": 255
                },
                "subsegment": {
                    "type": "string",
                    "maxLength": 255
                },
                "tags": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.BotUpdateAudienceSpecResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CalculateCampaignCapacityRequest": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string",
                    "maxLength": 10000
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "type": "string",
                    "maxLength": 512,
                    "minLength": 1
                },
                "line_number": {
                    "type": "string",
                    "maxLength": 255
                },
                "scheduleat": {
                    "type": "string"
                },
                "segment": {
                    "type": "string",
                    "maxLength": 255
                },
                "sex": {
                    "type": "string",
                    "maxLength": 255
                },
                "subsegment": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.CalculateCampaignCapacityResponse": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CalculateCampaignCostRequest": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string",
                    "maxLength": 10000
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "type": "string",
                    "maxLength": 512,
                    "minLength": 1
                },
                "line_number": {
                    "type": "string",
                    "maxLength": 255
                },
                "scheduleat": {
                    "type": "string"
                },
                "segment": {
                    "type": "string",
                    "maxLength": 255
                },
                "sex": {
                    "type": "string",
                    "maxLength": 255
                },
                "subsegment": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.CalculateCampaignCostResponse": {
            "type": "object",
            "properties": {
                "max_msg_target": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "msg_target": {
                    "type": "integer"
                },
                "total_cost": {
                    "type": "integer"
                }
            }
        },
        "dto.ChargeWalletRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "description": "Amount in Tomans (minimum 10000, maximum 1000000000)",
                    "type": "integer",
                    "maximum": 1000000000,
                    "minimum": 100000
                }
            }
        },
        "dto.ChargeWalletResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.CreateAgencyDiscountRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "discount_rate",
                "name"
            ],
            "properties": {
                "customer_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "discount_rate": {
                    "type": "number",
                    "maximum": 0.5,
                    "minimum": 0
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "dto.CreateAgencyDiscountResponse": {
            "type": "object",
            "properties": {
                "discount_rate": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CreateCampaignRequest": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string",
                    "maxLength": 10000
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "type": "string",
                    "maxLength": 512,
                    "minLength": 1
                },
                "line_number": {
                    "type": "string",
                    "maxLength": 255
                },
                "schedule_at": {
                    "type": "string"
                },
                "segment": {
                    "type": "string",
                    "maxLength": 255
                },
                "sex": {
                    "type": "string",
                    "maxLength": 255
                },
                "subsegment": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.CreateCampaignResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.CreateResponseTicketRequest": {
            "type": "object",
            "properties": {
                "attached_file_name": {
                    "type": "string"
                },
                "attached_file_size": {
                    "type": "integer"
                },
                "attached_file_url": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "ticket_id": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateResponseTicketResponse": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.CreateTicketRequest": {
            "type": "object",
            "properties": {
                "attached_file_name": {
                    "type": "string"
                },
                "attached_file_size": {
                    "type": "integer"
                },
                "attached_file_url": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.CreateTicketResponse": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "identifier"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3,
                    "example": "user@example.com or +989123456789"
                }
            }
        },
        "dto.GetCampaignResponse": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string"
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "line_number": {
                    "type": "string"
                },
                "scheduleat": {
                    "type": "string"
                },
                "segment": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "subsegment": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "dto.GetWalletBalanceResponse": {
            "type": "object",
            "properties": {
                "balance_status": {
                    "type": "string"
                },
                "credit": {
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "free": {
                    "type": "integer"
                },
                "frozen": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "string"
                },
                "locked": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "minimum_balance": {
                    "type": "integer"
                },
                "pending_transactions": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.ListActiveLineNumbersResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ActiveLineNumberItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ListAgencyActiveDiscountsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AgencyActiveDiscountItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ListAgencyCustomerDiscountsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AgencyCustomerDiscountItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ListAgencyCustomersResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AgencyCustomerItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ListCampaignsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetCampaignResponse"
                    }
                },
                "message": {
                    "type": "string"
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.ListTicketsResponse": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TicketGroup"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3,
                    "example": "user@example.com or +989123456789"
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8,
                    "example": "SecurePass123!"
                }
            }
        },
        "dto.OTPResendRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "otp_type"
            ],
            "properties": {
                "customer_id": {
                    "type": "integer"
                },
                "otp_type": {
                    "type": "string",
                    "enum": [
                        "mobile",
                        "email"
                    ]
                }
            }
        },
        "dto.OTPVerificationRequest": {
            "type": "object",
            "required": [
                "customer_id",
                "otp_code",
                "otp_type"
            ],
            "properties": {
                "customer_id": {
                    "type": "integer"
                },
                "otp_code": {
                    "type": "string"
                },
                "otp_type": {
                    "type": "string",
                    "enum": [
                        "mobile",
                        "email"
                    ]
                }
            }
        },
        "dto.PaginationInfo": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "dto.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "customer_id",
                "new_password",
                "otp_code"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "example": "NewSecurePass123!"
                },
                "customer_id": {
                    "type": "integer",
                    "example": 1
                },
                "new_password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8,
                    "example": "NewSecurePass123!"
                },
                "otp_code": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "dto.SignupRequest": {
            "type": "object",
            "required": [
                "account_type",
                "confirm_password",
                "email",
                "password",
                "representative_first_name",
                "representative_last_name",
                "representative_mobile"
            ],
            "properties": {
                "account_type": {
                    "description": "Account type selection",
                    "type": "string",
                    "enum": [
                        "individual",
                        "independent_company",
                        "marketing_agency"
                    ]
                },
                "company_address": {
                    "type": "string",
                    "maxLength": 255
                },
                "company_name": {
                    "description": "Company fields (required for independent_company and marketing_agency)",
                    "type": "string",
                    "maxLength": 60
                },
                "company_phone": {
                    "type": "string",
                    "minLength": 10
                },
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "description": "Common fields (required for all types)",
                    "type": "string",
                    "maxLength": 255
                },
                "national_id": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 10
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "postal_code": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 10
                },
                "referrer_agency_code": {
                    "description": "Optional agency referral",
                    "type": "string",
                    "maxLength": 255
                },
                "representative_first_name": {
                    "description": "Representative/Individual fields (required for all types)",
                    "type": "string",
                    "maxLength": 255
                },
                "representative_last_name": {
                    "type": "string",
                    "maxLength": 255
                },
                "representative_mobile": {
                    "type": "string"
                },
                "sheba_number": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.SignupResponse": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "otp_sent": {
                    "type": "boolean"
                },
                "otp_target": {
                    "description": "Mobile number (masked for security)",
                    "type": "string"
                }
            }
        },
        "dto.TicketGroup": {
            "type": "object",
            "properties": {
                "correlation_id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TicketItem"
                    }
                }
            }
        },
        "dto.TicketItem": {
            "type": "object",
            "properties": {
                "agency_name": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_first_name": {
                    "description": "Admin-only fields (populated in admin listings only)",
                    "type": "string"
                },
                "customer_last_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "replied_by_admin": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.TransactionHistoryItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount in Tomans",
                    "type": "integer"
                },
                "balance_after": {
                    "description": "Balance after transaction",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "balance_before": {
                    "description": "Balance before transaction",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "currency": {
                    "description": "Currency (usually TMN)",
                    "type": "string"
                },
                "datetime": {
                    "description": "When the transaction occurred",
                    "type": "string"
                },
                "external_ref": {
                    "description": "External reference (e.g., Atipay reference)",
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional transaction metadata",
                    "type": "object",
                    "additionalProperties": {}
                },
                "operation": {
                    "description": "Operation name for display",
                    "type": "string"
                },
                "status": {
                    "description": "Transaction status",
                    "type": "string"
                },
                "uuid": {
                    "description": "Transaction UUID",
                    "type": "string"
                }
            }
        },
        "dto.TransactionHistoryPaginationInfo": {
            "type": "object",
            "properties": {
                "current_page": {
                    "description": "Current page number",
                    "type": "integer"
                },
                "has_next": {
                    "description": "Whether there's a next page",
                    "type": "boolean"
                },
                "has_previous": {
                    "description": "Whether there's a previous page",
                    "type": "boolean"
                },
                "page_size": {
                    "description": "Number of items per page",
                    "type": "integer"
                },
                "total_items": {
                    "description": "Total number of items",
                    "type": "integer"
                },
                "total_pages": {
                    "description": "Total number of pages",
                    "type": "integer"
                }
            }
        },
        "dto.TransactionHistoryResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "List of transaction history items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TransactionHistoryItem"
                    }
                },
                "pagination": {
                    "description": "Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TransactionHistoryPaginationInfo"
                        }
                    ]
                }
            }
        },
        "dto.UpdateCampaignRequest": {
            "type": "object",
            "properties": {
                "adlink": {
                    "type": "string",
                    "maxLength": 10000
                },
                "budget": {
                    "type": "integer"
                },
                "city": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "content": {
                    "type": "string",
                    "maxLength": 512,
                    "minLength": 1
                },
                "finalize": {
                    "type": "boolean"
                },
                "line_number": {
                    "type": "string",
                    "maxLength": 255
                },
                "scheduleat": {
                    "type": "string"
                },
                "segment": {
                    "type": "string",
                    "maxLength": 255
                },
                "sex": {
                    "type": "string",
                    "maxLength": 255
                },
                "subsegment": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "maxItems": 255,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.UpdateCampaignResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
