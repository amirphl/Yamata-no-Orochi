// Package dto contains Data Transfer Objects for API request and response structures
package dto

import (
	"time"

	"github.com/amirphl/Yamata-no-Orochi/models"
)

// ChargeWalletRequest represents the request to charge a wallet
type ChargeWalletRequest struct {
	AmountWithTax uint64 `json:"amount" validate:"required,min=100000,max=1000000000"` // Amount in Tomans (minimum 10000, maximum 1000000000)
	CustomerID    uint   `json:"-"`
}

// ChargeWalletResponse represents the response after successfully charging a wallet
type ChargeWalletResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
	Token   string `json:"token"`
}

// AtipayRequest represents the callback data from Atipay after payment completion
type AtipayRequest struct {
	State             string `json:"state"`             // Transaction status (1=CanceledByUser, 2=OK, 3=Failed, etc.)
	Status            string `json:"status"`            // Payment status code
	ReferenceNumber   string `json:"referenceNumber"`   // Unique digital receipt (alphanumeric)
	ReservationNumber string `json:"reservationNumber"` // The unique ID originally sent by merchant (our invoice number)
	TerminalID        string `json:"terminalId"`        // Terminal number used for payment
	TraceNumber       string `json:"traceNumber"`       // Tracking number generated by payment gateway
	MaskedPAN         string `json:"maskedPan"`         // Masked card number used for payment
	RRN               string `json:"rrn"`               // Transaction reference number
}

// GetTransactionHistoryRequest represents the request to retrieve transaction history
type GetTransactionHistoryRequest struct {
	CustomerID uint       `json:"-"`                                         // Customer ID (from authenticated context)
	Page       uint       `json:"page" validate:"min=1"`                     // Page number (1-based)
	PageSize   uint       `json:"page_size" validate:"min=1,max=100"`        // Number of items per page
	StartDate  *time.Time `json:"start_date,omitempty" validate:"omitempty"` // Optional start date filter
	EndDate    *time.Time `json:"end_date,omitempty" validate:"omitempty"`   // Optional end date filter
	Type       *string    `json:"type,omitempty" validate:"omitempty"`       // Optional transaction type filter // TODO: one of
	Status     *string    `json:"status,omitempty" validate:"omitempty"`     // Optional transaction status filter // TODO: one of
}

// TransactionHistoryItem represents a single transaction history item
type TransactionHistoryItem struct {
	UUID          string            `json:"uuid"`                                        // Transaction UUID
	Status        string            `json:"status"`                                      // Transaction status
	Amount        uint64            `json:"amount"`                                      // Amount in Tomans
	Currency      string            `json:"currency"`                                    // Currency (usually TMN)
	Operation     string            `json:"operation"`                                   // Operation name for display
	DateTime      time.Time         `json:"datetime"`                                    // When the transaction occurred
	ExternalRef   *string           `json:"external_ref,omitempty" validate:"omitempty"` // External reference (e.g., Atipay reference)
	BalanceBefore map[string]uint64 `json:"balance_before"`                              // Balance before transaction
	BalanceAfter  map[string]uint64 `json:"balance_after"`                               // Balance after transaction
	Metadata      map[string]any    `json:"metadata,omitempty" validate:"omitempty"`     // Additional transaction metadata
}

// TransactionHistoryResponse represents the response for transaction history
type TransactionHistoryResponse struct {
	Items      []TransactionHistoryItem         `json:"items"`      // List of transaction history items
	Pagination TransactionHistoryPaginationInfo `json:"pagination"` // Pagination information
}

// TransactionHistoryPaginationInfo represents pagination metadata for transaction history
type TransactionHistoryPaginationInfo struct {
	CurrentPage uint `json:"current_page"` // Current page number
	PageSize    uint `json:"page_size"`    // Number of items per page
	TotalItems  uint `json:"total_items"`  // Total number of items
	TotalPages  uint `json:"total_pages"`  // Total number of pages
	HasNext     bool `json:"has_next"`     // Whether there's a next page
	HasPrevious bool `json:"has_previous"` // Whether there's a previous page
}

// TransactionTypeDisplay maps transaction types to human-readable operation names
var TransactionTypeDisplay = map[models.TransactionType]string{
	models.TransactionTypeDeposit:        "Wallet Recharge",
	models.TransactionTypeWithdrawal:     "Wallet Withdrawal",
	models.TransactionTypeLaunchCampaign: "Campaign Launch",
	models.TransactionTypeFreeze:         "Fund Freeze",
	models.TransactionTypeUnfreeze:       "Fund Unfreeze",
	models.TransactionTypeLock:           "Fund Lock",
	models.TransactionTypeUnlock:         "Fund Unlock",
	models.TransactionTypeRefund:         "Refund",
	models.TransactionTypeFee:            "Service Fee",
	models.TransactionTypeAdjustment:     "Balance Adjustment",
}

// TransactionStatusDisplay maps transaction statuses to human-readable status names
var TransactionStatusDisplay = map[models.TransactionStatus]string{
	models.TransactionStatusPending:   "Pending",
	models.TransactionStatusCompleted: "Completed",
	models.TransactionStatusFailed:    "Failed",
	models.TransactionStatusCancelled: "Cancelled",
	models.TransactionStatusReversed:  "Reversed",
}

// GetWalletBalanceRequest represents the request to get user wallet balance
type GetWalletBalanceRequest struct {
	CustomerID uint `json:"-"`
}

// GetWalletBalanceResponse represents the response with user wallet balance information
type GetWalletBalanceResponse struct {
	Message             string `json:"message"`
	Free                uint64 `json:"free"`
	Locked              uint64 `json:"locked"`
	Frozen              uint64 `json:"frozen"`
	Credit              uint64 `json:"credit"`
	Total               uint64 `json:"total"`
	Currency            string `json:"currency"`
	LastUpdated         string `json:"last_updated"`
	PendingTransactions uint64 `json:"pending_transactions"`
	MinimumBalance      uint64 `json:"minimum_balance"`
	BalanceStatus       string `json:"balance_status"`
}
