# Upstream definitions for beta environment
upstream yamata_backend {
    least_conn;
    server app-beta:8080 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Metrics and monitoring backend
upstream yamata_metrics {
    server app-beta:9090 max_fails=3 fail_timeout=30s;
}

# Frontend upstream
upstream frontend {
    server frontend-beta:80 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP Server - Redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN} www.${DOMAIN} ${API_DOMAIN};
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS Main Application Server
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ${DOMAIN} www.${DOMAIN};
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; style-src-elem 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https:; frame-ancestors 'self';" always;
    add_header X-Real-IP $remote_addr;
    add_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
    # Health check endpoint (no rate limiting)
    location = /health {
        access_log off;
        proxy_pass http://yamata_backend/api/v1/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # API routes with rate limiting - Backend only serves these
    location /api/ {
        # Rate limiting for API endpoints
        limit_req zone=api burst=100 nodelay;
        
        # Special rate limiting for auth endpoints
        location /api/v1/auth/ {
            limit_req zone=auth burst=20 nodelay;
            proxy_pass http://yamata_backend;
            include /etc/nginx/proxy.conf;
        }
        
        # Default API handling
        proxy_pass http://yamata_backend;
        include /etc/nginx/proxy.conf;
    }
    
    # Metrics endpoint - Backend only serves this
    location /metrics {
        # Allow only specific IPs (configure as needed)
        allow 127.0.0.1;
        allow 172.20.0.0/24;  # Docker network
        allow 10.0.0.0/8;     # Private networks
        allow 192.168.0.0/16; # Private networks
        deny all;
        
        proxy_pass http://yamata_metrics;
        include /etc/nginx/proxy.conf;
    }
    
    # Root path - serve frontend directly
    location = / {
        limit_req zone=general burst=100 nodelay;
        
        # Add debugging
        access_log /var/log/nginx/frontend_access.log;
        error_log /var/log/nginx/frontend_error.log debug;
        
        proxy_pass http://frontend/;
        include /etc/nginx/proxy.conf;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }
    
    # Static assets - proxy to frontend
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif|html)$ {
        limit_req zone=general burst=100 nodelay;
        
        proxy_pass http://frontend;
        include /etc/nginx/proxy.conf;
        
        # Cache static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # All other requests go to frontend (React Router fallback)
    location / {
        limit_req zone=general burst=100 nodelay;
        
        # Add debugging
        access_log /var/log/nginx/frontend_access.log;
        error_log /var/log/nginx/frontend_error.log debug;
        
        proxy_pass http://frontend;
        include /etc/nginx/proxy.conf;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }
    
    # Fallback location for frontend errors
    location @fallback {
        return 503 "Frontend service temporarily unavailable";
    }
}

# API Subdomain Server
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ${API_DOMAIN};
    
    # SSL Configuration (use same certificate or separate one)
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; style-src-elem 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https:; frame-ancestors 'self';" always;
    add_header X-Real-IP $remote_addr;
    add_header X-Forwarded-For $proxy_add_x_forwarded_for;
    add_header X-Forwarded-Proto $scheme;
    
    # Health check endpoint (no rate limiting)
    location = /health {
        access_log off;
        proxy_pass http://yamata_backend/api/v1/health;
        include /etc/nginx/proxy.conf;
    }
    
    # Metrics endpoint (restricted access) - Backend only serves this
    location /metrics {
        # Allow only specific IPs (configure as needed)
        allow 127.0.0.1;
        allow 172.20.0.0/24;  # Docker network
        allow 10.0.0.0/8;     # Private networks
        allow 192.168.0.0/16; # Private networks
        deny all;
        
        proxy_pass http://yamata_metrics;
        include /etc/nginx/proxy.conf;
    }
    
    # Auth endpoints with strict rate limiting - Backend only serves these
    location /api/v1/auth/ {
        limit_req zone=auth burst=20 nodelay;
        proxy_pass http://yamata_backend;
        include /etc/nginx/proxy.conf;
    }
    
    # All API routes - Backend only serves these
    location /api/ {
        limit_req zone=api burst=100 nodelay;
        proxy_pass http://yamata_backend;
        include /etc/nginx/proxy.conf;
    }
    
    # Block all unmatched requests on API subdomain
    location / {
        deny all;
        return 404;
    }
}

# Monitoring Server (Internal/Admin access)
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ${MONITORING_DOMAIN};
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; style-src-elem 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; frame-ancestors 'self';" always;
    
    # Restrict access to monitoring tools
    allow 127.0.0.1;
    allow 172.20.0.0/24;  # Docker network
    allow 10.0.0.0/8;     # Private networks (configure as needed)
    allow 192.168.0.0/16; # Private networks (configure as needed)
    deny all;
    
    # Prometheus
    location /prometheus/ {
        proxy_pass http://prometheus-beta:9090/;
        include /etc/nginx/proxy.conf;
    }
    
    # Grafana
    location /grafana/ {
        proxy_pass http://grafana-beta:3000/;
        include /etc/nginx/proxy.conf;
        
        # WebSocket support for Grafana
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Application metrics
    location /metrics/ {
        proxy_pass http://yamata_metrics/;
        include /etc/nginx/proxy.conf;
    }
    
    # Nginx status
    location /nginx_status {
        stub_status on;
        access_log off;
    }
} 