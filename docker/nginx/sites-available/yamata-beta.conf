# System-level Nginx configuration merged from system/nginx.conf
# High-performance worker configuration
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65536;

# Error log
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Events block for high performance
events {
    use epoll;
    worker_connections 4096;
    multi_accept on;
    accept_mutex off;
}

# HTTP block with system-level optimizations
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octot-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting zones (system-level)
    limit_req_zone $binary_remote_addr zone=api:10m rate=1000r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=200r/m;
    
    # Connection limiting (system-level)
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Upstream definitions for beta environment
    upstream yamata_backend {
        least_conn;
        server app-beta:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Metrics and monitoring backend
    upstream yamata_metrics {
        server app-beta:9090 max_fails=3 fail_timeout=30s;
    }

    # Frontend upstream
    upstream frontend {
        server 172.90.0.21:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP Server - Redirect to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name ${DOMAIN} www.${DOMAIN} ${API_DOMAIN};
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS Main Application Server
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name ${DOMAIN} www.${DOMAIN};
        
        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;
        
        # SSL Security Settings (system-level)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # Security Headers (system-level)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;
        add_header X-Real-IP $remote_addr;
        add_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Connection limiting (Optimized for High Load)
        limit_conn conn_limit_per_ip 50;
        
        # Health check endpoint (no rate limiting)
        location = /health {
            access_log off;
            proxy_pass http://yamata_backend/api/v1/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # API routes with rate limiting - Backend only serves these
        location /api/ {
            # Rate limiting for API endpoints
            limit_req zone=api burst=100 nodelay;
            
            # Special rate limiting for auth endpoints
            location /api/v1/auth/ {
                limit_req zone=auth burst=20 nodelay;
                proxy_pass http://yamata_backend;
                include /etc/nginx/proxy.conf;
            }
            
            # Default API handling
            proxy_pass http://yamata_backend;
            include /etc/nginx/proxy.conf;
        }
        
        # Metrics endpoint - Backend only serves this
        location /metrics {
            # Allow only specific IPs (configure as needed)
            allow 127.0.0.1;
            allow 172.20.0.0/24;  # Docker network
            allow 10.0.0.0/8;     # Private networks
            allow 192.168.0.0/16; # Private networks
            deny all;
            
            proxy_pass http://yamata_metrics;
            include /etc/nginx/proxy.conf;
        }
        
        # All other requests go to frontend
        location / {
            limit_req zone=general burst=100 nodelay;
            proxy_pass http://frontend;
            include /etc/nginx/proxy.conf;
        }
    }

    # API Subdomain Server
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name ${API_DOMAIN};
        
        # SSL Configuration (use same certificate or separate one)
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;
        
        # SSL Security Settings (system-level)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # Security Headers (system-level)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;
        add_header X-Real-IP $remote_addr;
        add_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header X-Forwarded-Proto $scheme;
        
        # Connection limiting (Optimized for High Load)
        limit_conn conn_limit_per_ip 50;
        
        # Health check endpoint (no rate limiting)
        location = /health {
            access_log off;
            proxy_pass http://yamata_backend/api/v1/health;
            include /etc/nginx/proxy.conf;
        }
        
        # Metrics endpoint (restricted access) - Backend only serves this
        location /metrics {
            # Allow only specific IPs (configure as needed)
            allow 127.0.0.1;
            allow 172.20.0.0/24;  # Docker network
            allow 10.0.0.0/8;     # Private networks
            allow 192.168.0.0/16; # Private networks
            deny all;
            
            proxy_pass http://yamata_metrics;
            include /etc/nginx/proxy.conf;
        }
        
        # Auth endpoints with strict rate limiting - Backend only serves these
        location /api/v1/auth/ {
            limit_req zone=auth burst=20 nodelay;
            proxy_pass http://yamata_backend;
            include /etc/nginx/proxy.conf;
            
            # Additional security for auth endpoints
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Request-ID $request_id;
        }
        
        # All API routes - Backend only serves these
        location /api/ {
            limit_req zone=api burst=100 nodelay;
            proxy_pass http://yamata_backend;
            include /etc/nginx/proxy.conf;
        }
        
        # Block all unmatched requests on API subdomain
        location / {
            deny all;
            return 404;
        }
    }

    # Monitoring Server (Internal/Admin access)
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name ${MONITORING_DOMAIN};
        
        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN}/chain.pem;
        
        # SSL Security Settings (system-level)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # Security Headers (system-level)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; frame-ancestors 'self';" always;
        
        # Restrict access to monitoring tools
        allow 127.0.0.1;
        allow 172.20.0.0/24;  # Docker network
        allow 10.0.0.0/8;     # Private networks (configure as needed)
        allow 192.168.0.0/16; # Private networks (configure as needed)
        deny all;
        
        # Prometheus
        location /prometheus/ {
            proxy_pass http://prometheus-beta:9090/;
            include /etc/nginx/proxy.conf;
        }
        
        # Grafana
        location /grafana/ {
            proxy_pass http://grafana-beta:3000/;
            include /etc/nginx/proxy.conf;
            
            # WebSocket support for Grafana
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Application metrics
        location /metrics/ {
            proxy_pass http://yamata_metrics/;
            include /etc/nginx/proxy.conf;
        }
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
        }
    }
} 